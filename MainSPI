/*
* File:   Main.c
* Author: applet
*
* Created on January 26, 2015, 3:23 PM
*/

#include <stdio.h>
#include <stdlib.h>
#include <p18F25K22.h>
#include <usart.h>
#include <spi.h>
#include "tomIsLaw.h"


//set this to 0 if you want to prove that voltage steps by correct amount
//otherwise DO NOT TURN OFF FOR ANY REASON
int AUTOMATIC_ERROR_CORRECTION = 1; //1=automatic error commander ENABLED
int index = 0; //SRAM index global variable

//new improved main function; behold its relative cleanliness
int main(int argc, char** argv) {

    int phailDetectorUnit;
    int phailStates;
    int fixIP;
    int fixTimer;
    int killSwitch;
    int log;
    unsigned char SPI_status;
    unsigned char inByte[2];
    unsigned int longOut;
    
    //initialize USART, PWM, SPI, SRAM pinout
    Setup();
    //sometimes two clears are necessary.
    putc1USART(0x0C);
    //display helpful menu of commands + company info
    Menu();

    //initial duty cycle (1 bits out of 1024) sets voltage to 0
    longOut = 0x01;

    //in beginning: not waiting on automatic error fixer
    fixIP = 0;
    fixTimer = 0;
   
    //my grandfather always said: "remember Thomas, never kill a patient"
    killSwitch = 0; //this kills the system to avoid killing our clients
    while(1){
        //reads 4 MSBs of spi status flag
        phailStates =(SPI_status&0xF0)>>4;
        //D = severe error, C = moderate error, B = "of concern"
        //at this time, moderate errors are not blocking
        //only severe errors block user input right now
        //(recommend that this not be changed)
        phailDetectorUnit = (phailStates == 0xD);

        //SITUATION 1: slave reports good status, no fix in progress
        if (!phailDetectorUnit && !fixIP){
            gets1USART(inByte,1);
            parseUserInput(inByte, &longOut);
            index++;
        }
        //SITUATION 2: slave reports blocking error, no fix in progress
        else if (phailDetectorUnit && !fixIP){
            fixIP = 1;
            fixTimer = 0;
        }
        //SITUATION 3: slave reports blocking error, fix in progress
        else if (phailDetectorUnit && fixIP){
            fixTimer ++;
        }
        //SITUATION 4: slave reports good status, fix in progress
        else if (!phailDetectorUnit && fixIP){
            phailDetectorUnit = 0;
            fixTimer = 0;
            fixIP = 0;
        }
        //SITUATION 5: blocking error not fixed in 100 cycles (aaa!!)
        if (fixTimer > 99){
            printf("Severe voltage error unsuccessfully resolved! Emergency disconnect: GO!\r\n");
            writeSRAM(0xFF,index); //log this disaster
            index++;
            longOut = 1; //sets min duty cycle; tells slave to turn motor off
            killSwitch = 1; //terminate immediately after we turn motor off
        }

        // TOM'S CRAFTY USART OVERFLOW ERROR DETECTOR AND FIXER
        if (((RCSTA1 >> 1) & 0x1) != 0){
            RCSTA1 ^ 0x2;
            //printf("TEST: sneaky fix is operational");
            //writeSRAM(0xCF,index);
            //index++;
            tomCheapassFix(0);
            tomCheapassFix(1);
        }
        //do SPI things, report back after each session
        SPI_status = SPI_KNIGHT_COMMANDER(&longOut,fixIP);

        if ((SPI_status != 0xEA)&&(!fixIP)){
            writeSRAM(SPI_status,index);
            index++;
        }

        if (index > 255){ //only have 8 bits of addresses at this time
            index = 0;
        }

        if (killSwitch) return 0; 

    }
    return -1;
}


void Menu(){
    putc1USART(0x0C);
    putrs1USART("AHT Mobile Medical\r\n");
    putrs1USART("--=Control Scheme=--\r\n");
    putrs1USART("[0-5] Volt. Presets\r\n");
    putrs1USART("[w] Increment +.02 V\r\n");
    putrs1USART("[s] Decrement -.02 V\r\n");
    putrs1USART("[x] Memory Dump\r\n");
    putrs1USART("[c] Memory Clear\r\n");
    //it would be cool to have the following feature implemented
    //but I don't have more time right now
    //putrs1USART("[e] Toggle Error Display\r\n");
    putrs1USART("[z] DEGAUSS!\r\n");
    //next line is depreciated; force status flag 0xAA instead
    //putrs1USART("[d] Debug Data!\r\n");
    return;
}
void Setup(){
   
    OpenSPI1( SPI_FOSC_64, MODE_00, SMPMID );

    TRISBbits.TRISB0 = 0;
    TRISBbits.TRISB1 = 0;
    TRISCbits.RC6 = 0;
    TRISCbits.RC7 = 1;

    //kill analog inputs; we want these pins for digital IO
    ANSELA=0;
    ANSELB=0;
    ANSELC=0;

    //enable USART, see datasheet for formula used to get number '129'
    Open1USART(USART_TX_INT_OFF &
    USART_RX_INT_OFF &
    USART_ASYNCH_MODE &
    USART_EIGHT_BIT &
    USART_CONT_RX &
    USART_BRGH_LOW,
    129);

     /* SRAM setup stuff */

   //Control signals
   TRISAbits.TRISA0 = 0; //!CS
   TRISAbits.TRISA1 = 0; //!OE
   TRISAbits.TRISA2 = 0; //!WE

   PORTAbits.RA0 = 1; //!CS disabled
   PORTAbits.RA1 = 1; //!OE disabled
   PORTAbits.RA2 = 1; //!WE disabled

   //address bits
   TRISAbits.TRISA3 = 0; //addr0
   TRISAbits.TRISA4 = 0; //addr1

   PORTAbits.RA3 = 0;
   PORTAbits.RA4 = 0;

   //IO bits
   //all are initially set to be outputs
   TRISB = 0xFF;
   //all are initially low
   PORTBbits.RB0 = 0;
   PORTBbits.RB1 = 0;
   PORTBbits.RB2 = 0;
   PORTBbits.RB3 = 0;
   PORTBbits.RB4 = 0;
   PORTBbits.RB5 = 0;
   PORTBbits.RB6 = 0;
   PORTBbits.RB7 = 0;

}

void writeSRAM(unsigned char data, int address){
/*TRISAbits.RA0 = 0 //!CS
   TRISAbits.RA1 = 0; //!OE
   TRISAbits.RA2 = 0; //!WE
   TRISAbits.RA3 = 0; //latch
 */
    int delay;

    PORTAbits.RA0 = 0; //SRAM enabled
    PORTAbits.RA1 = 1; //not reading from SRAM
    PORTAbits.RA2 = 1; //not writing to the SRAM

    
    TRISB = 0x00; //IO pins set to be outputs

    LATB = address; //send the 8 address bits to B pins

    LATAbits.LATA3 = 1; //latch address to SRAM via BRANDO GATE
    LATAbits.LATA3 = 0; //close BRANDO GATE to hold address value

    LATB = data; //send the 8 data bits to B pins

    PORTAbits.RA2 = 0; //writing TO the SRAM

    PORTAbits.RA2 = 1; //not writing TO the SRAM
    PORTAbits.RA0 = 1; //SRAM disabled

    //IO pins reset to be inputs
    TRISB = 0xff;
}

unsigned char readSRAM(int address){
    /*TRISAbits.RA0 = 0 //!CS
   TRISAbits.RA1 = 0; //!OE
   TRISAbits.RA2 = 0; //!WE
   TRISAbits.RA3 = 0; //addr0
   TRISAbits.RA4 = 0; //addr1
*/
    int delay;
    unsigned char toSender;

    //IO pins set to inputs
    TRISB = 0x00;

    PORTAbits.RA0 = 0; //SRAM enabled
    PORTAbits.RA1 = 1; //not reading from SRAM
    PORTAbits.RA2 = 1; //not writing to the SRAM

    LATB = address; //send the 8 address bits to B pins

    LATAbits.LATA3 = 1; //latch address to SRAM via BRANDO GATE
    LATAbits.LATA3 = 0; //close BRANDO GATE to hold address value


    TRISB = 0xFF; //B pins will be used to read

    PORTAbits.RA1 = 0; //reading from sram

    toSender = PORTB; //read data from B pins
   
    PORTAbits.RA0 = 1; //SRAM disabled
    PORTAbits.RA1 = 1; //not reading from SRAM

    return toSender;
}
//pay no attention to the following function
//can YOU discover what it does? probably
void tomCheapassFix(int toggle){
    if (toggle){
        Open1USART(USART_TX_INT_OFF &
        USART_RX_INT_OFF &
        USART_ASYNCH_MODE &
        USART_EIGHT_BIT &
        USART_CONT_RX &
        USART_BRGH_LOW,
        129);
    } else {
        Close1USART();
    }

}

//translates the vast quantity of possible user inputs into useable instructions
void parseUserInput(unsigned char* inByte, unsigned int* longOut){

    //increment voltage by no more than .5%
    if(inByte[0] == 'w') {
        if (*longOut < 1023) *longOut = *longOut + 1;
        putrs1USART("+.025V\r\n");
        writeSRAM(0xE0,index);
   
    }
    //decrement by no more than .5%
    else if (inByte[0] == 's'){
        if (*longOut > 1) *longOut = *longOut - 1;
        putrs1USART("-.025V\r\n");
       writeSRAM(0xE1,index);

    }
    //PRESETS (0-5 volts)
    else if (inByte[0]=='0'){ //TURN IT OFF!!! TURN IT OFF!!!!
        *longOut = 1;
        putrs1USART("0 V \r\n");
        writeSRAM(0xF0,index);
    
    }
    else if (inByte[0]=='1'){
        *longOut = 205; //205
        putrs1USART("1 V \r\n");
       writeSRAM(0xF1,index);
  
    }
    else if (inByte[0]=='2'){
        *longOut = 411; //411
        putrs1USART("2 V \r\n");
        writeSRAM(0xF2,index);
     
    }
    else if (inByte[0]=='3'){
        *longOut = 613; //613
        putrs1USART("3 V \r\n");
        writeSRAM(0xF3,index);
       
    }
    else if (inByte[0]=='4'){
        *longOut = 823; //823
        putrs1USART("4 V \r\n");
        writeSRAM(0xF4,index);
        
    }
    else if (inByte[0]=='5'){ //FULL POWER!!!!!
        *longOut = 1023;
        putrs1USART("5 V \r\n");
        writeSRAM(0xF5,index);
       
    }
    else if (inByte[0]=='x'){
        TOTAL_RECALL();
       //super annoying to log requests to view logged requests
       //for the love of god do not log this crap...please...looks SO crappy
       // writeSRAM(0xE4,index);
        index--;
    } else if (inByte[0]=='z') {
        Menu();
        writeSRAM(0xE3,index);
    } else if (inByte[0]=='l'){
        printf("Duty bits are %d\r\n",*longOut);
        writeSRAM(0xE5,index);
     } else if (inByte[0]=='c'){
        printf("SRAM memory cleared!\r\n");
        index = 0;
        writeSRAM(0xE2,index);
    }

    return;
}

unsigned char SPI_KNIGHT_COMMANDER(unsigned int* knight_command, int trying){

    int SRAM_INDEX;
    unsigned int longOut;
    unsigned char outByteH;
    unsigned char outByteL;

    unsigned char bilko[3];

    unsigned int actualWork;
    int turboPhail;
    unsigned int addrL_temp;
    unsigned int addrH_temp;


    int difference;
    SRAM_INDEX=0;
    longOut = *knight_command;

    turboPhail = 0;
    bilko[0] = 0;
    bilko[1] = 0;
    bilko[2] = 0;


    outByteL = (unsigned char)((longOut & 0x003)<<4);
    outByteH = (unsigned char)((longOut & 0x3FC)>>2);

    /* BEHOLD THE GLORIOUS WORKINGS OF SPI KNIGHT COMMANDER*/

    SSP1BUF = outByteL; //sending LSBs of PWM duty cycle
    while (!SSP1STATbits.BF);
    bilko[0] = SSP1BUF; //status report from slave

    SSP1BUF = outByteH; //sending MSBs of PWM duty cycle
    while (!SSP1STATbits.BF);
    bilko[1] = SSP1BUF; //LSBs of ADC results from slave

    SSP1BUF = 3; //dummy data just to keep things going
    while (!SSP1STATbits.BF);
    bilko[2] = SSP1BUF; //MSBs of ADC results from slave

    SSP1BUF = 4; //dummy data just to keep things going
    while (!SSP1STATbits.BF);
    bilko[3] = SSP1BUF; //holds voltage correction value from slave

    /*               END OF CORE SPI CODE                 */

    bilko[1] = bilko[1] >> 6;

    addrL_temp = (unsigned int) bilko[1];
    addrH_temp = (unsigned int) bilko[2];
    actualWork = (addrH_temp << 2) + (addrL_temp);

    difference = actualWork - longOut;
    if (difference<0) difference = difference*(-1);
    //if each bit is +-.10%

    //debug mode
    if (bilko[0]==0xAA){
        //putrs1USART("Flag 1: recieved AA\r\n");
        //putrs1USART("TEST IN PROGRESS: ADC FLAG BITS RECIEVED\r\n");

        //printf("Lower bits: %u\r\n",bilko[1]);
        //printf("Upper bits: %u\r\n",bilko[2]);
        printf("ADC result bits: %u\r\n",actualWork);
        printf("PWM bits       : %u\r\n",longOut);
        printf("difference     : %d\r\n",difference);
    }

    /*else if (bilko[0]==0xEA){ //no error, debug only
        // printf("Error level 0: nobody-cares\r\n");
    }

    else if (bilko[0]==0xBA){ //of concern, too high
        //printf("Error level 2: of concern, V too high\r\n");
        //longOut = longOut + bilko[3];
         //if (longOut > 21) longOut = longOut - 5;
        

    } else if (bilko[0]==0xBB){ //of concern, too low
         //printf("Error level 2: of concern, V too low\r\n");
        //if (longOut < 1003) longOut = longOut + 5;
    }*/

    else if (bilko[0]==0xCA){ //moderate, too high
        //if (trying) printf("Error level 1: moderate, V too high\r\n");
        if ((longOut > 51)&&(AUTOMATIC_ERROR_CORRECTION)) longOut = longOut - bilko[3];

    } else if (bilko[0]==0xCB){ //moderate, too low
        //if (trying) printf("Error level 1: moderate, V too low\r\n");
        if ((longOut < 973)&&(AUTOMATIC_ERROR_CORRECTION)) longOut = longOut + bilko[3];

    } else if (bilko[0]==0xDA){ //severe, too high
        //if (trying) printf("Error level 0: severe, too high\r\n");
        if ((longOut > bilko[3]+1)&&(AUTOMATIC_ERROR_CORRECTION)) longOut = longOut - bilko[3];

    } else if (bilko[0]==0xDB){ //severe, too low
        //if (trying) printf("Error level 0: severe, too low\r\n");
        if (((longOut+bilko[3]) > longOut)&&(AUTOMATIC_ERROR_CORRECTION)) longOut = longOut + bilko[3];

    }

    return bilko[0];
}

void TOTAL_RECALL(){
    int i;
    unsigned char memory;
    printf("MEMORY RECALL: GO\r\n");
    //runs through all addresses being used in SRAM
    //translates the data for the user
    //see "Tom's Guide to Memory"
    for (i=0;i<index;i++){
        memory = readSRAM(i);
        printf("%d ",i);
        if (memory == 0xAA){
            printf("System Test OK\r\n");
        }
        else if (memory == 0xEA){
            printf("All is well; why is this in SRAM?\r\n");
        }
        else if (memory == 0xBA){
            printf("Error level 2, too high by 1\r\n");
        }
        else if (memory == 0xBB){
            printf("Error level 2, too low by 1\r\n");
        }
        else if (memory == 0xCA){
            printf("Error level 1, too high by 2\r\n");
        }
        else if (memory == 0xCB){
            printf("Error level 1, too low by 2\r\n");
        }
        else if (memory == 0xDA){
            printf("Error level 0, too high by 5\r\n");
        }
        else if (memory == 0xDB){
            printf("Error level 0, too low by 5\r\n");
        }
        else if (memory == 0xFF){
            printf("Total System Failure! ABORT!\r\n");
        }
        else if (memory == 0xE0){
            printf("Incremented voltage\r\n");
        }
        else if (memory == 0xE1){
            printf("Decremented voltage\r\n");
        }
        else if (memory == 0xF0){
            printf("Voltage present: 0V\r\n");
        }
        else if (memory == 0xF1){
            printf("Voltage present: 1V\r\n");
        }
        else if (memory == 0xF2){
            printf("Voltage present: 2V\r\n");
        }
        else if (memory == 0xF3){
            printf("Voltage present: 3V\r\n");
        }
        else if (memory == 0xF4){
            printf("Voltage present: 4V\r\n");
        }
        else if (memory == 0xF5){
            printf("Voltage present: 5V\r\n");
        }
        else if (memory == 0xE3){
            printf("Screen cleared\r\n");
        }
        else if (memory == 0xE5){
            printf("DEBUG: duty cycle bits printed\r\n");
        }
        else if (memory == 0xE2){
            printf("SRAM memory cleared!\r\n");
        }
        else if (memory == 0xE4){
            printf("Memory recall command given!\r\n");
        }
        else if (memory == 0xCF){
            printf("DEBUG: tom's cheapass fix is doing its job\r\n");
        }
        else printf("Unknown memory value: %x \r\n",memory);
    }
    return;
}
